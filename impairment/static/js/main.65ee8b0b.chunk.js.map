{"version":3,"sources":["components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Calculator","props","updateEntry","event","val","target","value","length","isNumber","newArr","state","percents","push","preventDefault","setState","entry","resultText","calculate","alert","removeItem","key","splice","text","resultTextDefault","setInputFocus","total","bind","this","myInputRef","focus","array","forEach","item","index","parseInt","Math","round","digits","nums","indexOf","ListGroup","map","Item","className","onClick","Navbar","bg","expand","Brand","Card","Body","Row","Col","Form","Group","controlId","Control","type","inputmode","autoFocus","placeholder","onChange","ref","c","Button","variant","clearList","calculateRows","React","Component","App","basename","Container","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UA4HeA,E,kDAjHb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IAqCRC,YAAc,SAACC,GACb,IAAMC,EAAMD,EAAME,OAAOC,MACzB,GAAmB,IAAfF,EAAIG,OACN,GAAI,EAAKC,SAASJ,GAAK,CACrB,IAAMK,EAAS,EAAKC,MAAMC,SAC1BF,EAAOG,KAAKR,GACZD,EAAMU,iBAAkB,EAAKC,SAAS,CAACC,MAAM,GAAIJ,SAASF,EAAQO,WAAW,EAAKC,UAAUR,UAE5FS,MAAM,uCACNf,EAAMU,iBAAkB,EAAKC,SAAS,CAACC,MAAM,UAI/CZ,EAAMU,iBAAkB,EAAKC,SAAS,CAACC,MAAMZ,EAAME,OAAOC,SAnD1C,EAuDpBa,WAAa,SAACC,GACZ,IAAMX,EAAS,EAAKC,MAAMC,SAC1BF,EAAOY,OAAOD,EAAI,GAClB,IAAIE,EAAO,EAAKZ,MAAMa,kBACA,IAAlBd,EAAOF,SACTe,EAAO,EAAKL,UAAUR,IAExB,EAAKK,SAAS,CAACH,SAASF,EAAQM,MAAM,GAAIC,WAAWM,IACrD,EAAKE,iBA7DL,EAAKd,MAAQ,CACXK,MAAM,GACNJ,SAAS,GACTc,MAAM,EACNT,WAAW,yBACXO,kBAAkB,0BAEpB,EAAKC,cAAgB,EAAKA,cAAcE,KAAnB,gBATH,E,iDAYpB,WACEC,KAAKC,WAAWC,U,uBAGlB,WACEF,KAAKb,SAAS,CAACH,SAAS,GAAII,MAAM,GAAIC,WAAWW,KAAKjB,MAAMa,oBAC5DI,KAAKH,kB,uBAGP,SAAUM,GACR,IAAIL,EAAM,EAMV,OAJAK,EAAMC,SAAQ,SAAUC,EAAMC,GAE5BR,IADa,IAAIA,IACUS,SAASF,EAAK,IAAI,QAExCG,KAAKC,MAAMX,GAAO,qBAAsBU,KAAKC,MAAY,IAANX,GAAW,IAAM,O,sBAG7E,SAASY,GACP,IAAMC,EAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAClD,OAA8B,IAA3BA,EAAKC,QAAQF,EAAO,MACO,IAA3BC,EAAKC,QAAQF,EAAO,M,2BAgCzB,WAAiB,IAAD,OACd,OACE,cAACG,EAAA,EAAD,UACGb,KAAKjB,MAAMC,SAAS8B,KAAI,SAACT,EAAKC,GAAN,OACrB,eAACO,EAAA,EAAUE,KAAX,WAA8BV,EAAM,kBACpC,sBAAMW,UAAU,cAAhB,SAA8B,cAAC,IAAD,CAAWC,QAAS,kBAAM,EAAKzB,WAAWc,UADnDA,U,oBAO/B,WAAS,IAAD,OACN,OACE,qCACE,cAACY,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,SACE,cAACF,EAAA,EAAOG,MAAR,sCAEF,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,KAAN,WACE,cAACC,EAAA,EAAD,UAAK,eAACC,EAAA,EAAD,WAAK,4BAAIzB,KAAKjB,MAAMM,aAApB,SACL,eAACmC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,OACLC,UAAU,UACVC,WAAS,EACTC,YAAY,sBACZC,SAAUlC,KAAKzB,YAAaI,MAAOqB,KAAKjB,MAAMK,MAC9C+C,IAAK,SAAAC,GAAC,OAAK,EAAKnC,WAAamC,KAPjC,IAQM,WAIV,cAACX,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,CAAQC,QAAQ,YAAYrB,QAAS,kBAAM,EAAKsB,aAAhD,wBAGJ,sBACA,cAACf,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAMzB,KAAKwC,gC,GA3GHC,IAAMC,W,qBCqBhBC,MAhBf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAAC,IAAD,CAAQ4B,SAAU,cAAlB,SACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC,EAAD,eCVCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65ee8b0b.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {TrashFill} from 'react-bootstrap-icons';\nimport { Row } from 'react-bootstrap';\n\nclass Calculator extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      entry:\"\",\n      percents:[],\n      total:0,\n      resultText:\"Start entering numbers\",\n      resultTextDefault:\"Start entering numbers\"\n    }\n    this.setInputFocus = this.setInputFocus.bind(this);\n  }\n\n  setInputFocus() {\n    this.myInputRef.focus();\n  }\n\n  clearList() {\n    this.setState({percents:[], entry:\"\", resultText:this.state.resultTextDefault});\n    this.setInputFocus();\n  }\n\n  calculate(array) {\n    var total=0; /* here */\n    var remainder=100; /* here */\n    array.forEach(function (item, index) {\n      remainder = (100-total);\n      total = total + remainder*(parseInt(item,10)/100);\n    });\n    return Math.round(total)+\"% impairment (2DP \"+ Math.round(total*100)/100 + \"%)\";\n  }\n\n  isNumber(digits){\n    const nums = ['0','1','2','3','4','5','6','7','8','9'];\n    if(nums.indexOf(digits[0])===-1){return false;}\n    if(nums.indexOf(digits[1])===-1){return false;}\n    return true;\n  }\n\n  updateEntry = (event) => {\n    const val = event.target.value;\n    if (val.length === 2){\n      if (this.isNumber(val)){\n        const newArr = this.state.percents;\n        newArr.push(val);\n        event.preventDefault(); this.setState({entry:\"\", percents:newArr, resultText:this.calculate(newArr)});\n      } else {\n        alert('Must be a number between 01 and 99.')\n        event.preventDefault(); this.setState({entry:\"\"});\n      }\n\n    } else {\n      event.preventDefault(); this.setState({entry:event.target.value});\n    }\n  }\n\n  removeItem = (key) => {\n    const newArr = this.state.percents;\n    newArr.splice(key,1);\n    var text = this.state.resultTextDefault\n    if (newArr.length !== 0){\n      text = this.calculate(newArr);\n    }\n    this.setState({percents:newArr, entry:\"\", resultText:text});\n    this.setInputFocus();\n  }\n\n  calculateRows() {\n    return (\n      <ListGroup>\n        {this.state.percents.map((item,index) => (\n            <ListGroup.Item key={index} >{item}{'               '}\n            <span className=\"float-right\"><TrashFill onClick={() => this.removeItem(index)} /></span></ListGroup.Item>\n        ))}\n      </ListGroup>\n    )\n  }\n\n  render(){\n    return (\n      <>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand>Impairment Calculator</Navbar.Brand>\n        </Navbar>\n        <Card>\n          <Card.Body>\n            <Row><Col><p>{this.state.resultText}</p> </Col></Row>\n            <Row>\n              <Col>\n                <Form>\n                  <Form.Group controlId=\"formPercent\">\n                    <Form.Control \n                      type=\"text\" \n                      inputmode=\"numeric\" \n                      autoFocus \n                      placeholder=\"Leading 0 under 10%\" \n                      onChange={this.updateEntry} value={this.state.entry}\n                      ref={c => (this.myInputRef = c)}\n                    /> {' '}  \n                  </Form.Group>\n                </Form>              \n              </Col>\n              <Col>\n                <Button variant=\"secondary\" onClick={() => this.clearList()}>Clear</Button>\n              </Col>              \n            </Row>\n            <p />\n            <Row><Col>{this.calculateRows()}</Col></Row>\n          </Card.Body>\n        </Card>\n      </>\n    )\n  }\n}\nexport default Calculator;","import Container from 'react-bootstrap/Container';\nimport Calculator from './components/Calculator';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport './App.css';\n\n/**\n * \n * ==== Rebuilding this app from scratch ====\n * npx create-react-app <app-name>\n * npm install react-bootstrap bootstrap\n * npm install react-bootstrap-icons --save\n * npm install react-router-dom\n * \n */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={'/impairment'}>\n        <Container>\n          <Switch>                                          \n            <Route path=\"/\">\n              <Calculator />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}