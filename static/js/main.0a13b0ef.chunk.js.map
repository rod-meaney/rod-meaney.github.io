{"version":3,"sources":["pages/HomePage.js","pages/NewPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Card","Body","Title","href","NewPage","gameTime","localStorage","getItem","parseInt","useState","value","setValue","useEffect","setItem","Row","Col","xs","onChange","slideStop","target","min","max","step","App","Container","Navbar","bg","expand","NavDropdown","title","id","className","Item","as","Link","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAkBeA,EAfE,WAEf,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,aACA,4BACE,4BAAI,uBAAGC,KAAK,WAAR,qBACJ,4BAAI,uBAAGA,KAAK,aAAR,wB,iDC+BCC,EAnCC,WAEd,IAAIC,EAAWC,aAAaC,QAAQ,YACZF,EAAP,OAAbA,EAA6B,GAAoBG,SAASH,GAH1C,MAKQI,mBAASJ,GALjB,mBAKZK,EALY,KAKLC,EALK,KAWpB,OAJAC,qBAAU,WACRN,aAAaO,QAAQ,WAAYH,MAIjC,kBAACV,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,6BACA,sCACA,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACLN,EADH,SAGA,kBAACK,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,CACEN,MAAOA,EACPO,SAAU,SAAAC,GAAS,OAAIP,EAASH,SAASU,EAAUC,OAAOT,SAC1DU,IAAK,GACLC,IAAK,IACLC,KAAM,UCALC,MAxBf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACC,EAAA,EAAD,CAAaC,MAAM,OAAOC,GAAG,qBAAqBC,UAAU,oBAC1D,kBAACH,EAAA,EAAYI,KAAb,CAAkBC,GAAIC,IAAMC,GAAG,KAA/B,QACA,kBAACP,EAAA,EAAYI,KAAb,CAAkBC,GAAIC,IAAMC,GAAG,aAA/B,cAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCbQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a13b0ef.chunk.js","sourcesContent":["import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nconst HomePage = () => {\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Home</Card.Title>\n        <ul>\n          <li><a href=\"./learn\">Learning subsite</a></li>\n          <li><a href=\"./twister\">Twister subsite</a></li>\n        </ul>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default HomePage;","import React, { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nconst NewPage = () => {\n  //Check to see if we have a local version before setting state\n  let gameTime = localStorage.getItem('gameTime');\n  if (gameTime === null) {gameTime=60;} else {gameTime=parseInt(gameTime);}\n\n  const [ value, setValue ] = useState(gameTime);\n\n  useEffect(() => {\n    localStorage.setItem('gameTime', value);\n  });\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Some worked examples</Card.Title>\n        <h3>Slider</h3>\n        <Row>\n          <Col xs=\"4\">\n            {value} secs\n          </Col>\n          <Col xs=\"8\">\n            <RangeSlider\n              value={value}\n              onChange={slideStop => setValue(parseInt(slideStop.target.value))}\n              min={20}\n              max={120}\n              step={10}\n            />\n          </Col>          \n        </Row>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default NewPage;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport './App.css';\nimport HomePage from './pages/HomePage';\nimport NewPage from './pages/NewPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <NavDropdown title=\"Menu\" id=\"basic-nav-dropdown\" className=\"dropdown mr-auto\">\n            <NavDropdown.Item as={Link} to=\"/\">Home</NavDropdown.Item>\n            <NavDropdown.Item as={Link} to=\"/new-page\">New page</NavDropdown.Item>\n          </NavDropdown>\n        </Navbar>\n        {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/new-page\">\n            <NewPage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}