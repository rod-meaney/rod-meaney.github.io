{"version":3,"sources":["components/utils.js","components/orientation/OrientationDisplay.js","components/orientation/OrientationTest.js","components/Tremor.js","App.js","serviceWorker.js","index.js"],"names":["approx","value","toFixed","isTest","window","location","origin","indexOf","OrientationDisplay","eventOr","eventMo","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Body","ListGroup","Item","className","alpha","setX","beta","setY","gamma","setZ","acceleration","x","setXAcc","y","setYAcc","z","setZAcc","interval","setAccInt","OrientationTest","canPlay","handleOrientation","useState","Alert","availableMessage","setAvailableMessage","onClick","DeviceOrientationEvent","DeviceMotionEvent","requestPermission","then","response","addEventListener","Tremor","props","event","setState","orientationEvent","handleMotion","motionEvent","mainApp","state","showOrientationDisplayComponent","this","bind","removeEventListener","Navbar","bg","expand","Brand","React","Component","App","basename","Container","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cee1e975.chunk.js","sourcesContent":["export function approx(value) {\n  if (value != null){return value.toFixed(2);}\n  return 0; \n}\nexport function isTest() {\n  if (window.location.origin.indexOf(\"3000\")>-1) return true;\n  if (window.location.origin.indexOf(\"amazonaws.com\")>-1) return true; //minor hack while deploying client to aws\n  return false;\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Accordion from 'react-bootstrap/Accordion';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {approx} from '../utils';\n/*\nAll from https://sensor-js.xyz/demo.html\n*/\nconst OrientationDisplay = ({eventOr, eventMo}) => {\n  \n  const setX = () => {try {return approx(eventOr.alpha)} catch {return 0;}}\n  const setY = () => {try {return approx(eventOr.beta)} catch {return 0;}}\n  const setZ = () => {try {return approx(eventOr.gamma)} catch {return 0;}}\n  const setXAcc = () => {try {return approx(eventMo.acceleration.x)} catch {return 0;}}\n  const setYAcc = () => {try {return approx(eventMo.acceleration.y)} catch {return 0;}}\n  const setZAcc = () => {try {return approx(eventMo.acceleration.z)} catch {return 0;}}\n  const setAccInt = () => {try {return approx(eventMo.interval)} catch {return 0;}}\n\n  return (\n    <Accordion>\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n            Device information\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"1\">\n          <Card.Body>\n            <p>\n              The below is showing your devices orientation, which is used to play this game. If the numbers are not changing as you move the device, the game will not work for you.\n            </p>\n            <ListGroup>\n              <ListGroup.Item>alpha<span className=\"float-right\">{setX()}</span></ListGroup.Item>\n              <ListGroup.Item>beta<span className=\"float-right\">{setY()}</span></ListGroup.Item>\n              <ListGroup.Item>gamma<span className=\"float-right\">{setZ()}</span></ListGroup.Item>\n              <ListGroup.Item>Acc X<span className=\"float-right\">{setXAcc()}</span></ListGroup.Item>\n              <ListGroup.Item>Acc Y<span className=\"float-right\">{setYAcc()}</span></ListGroup.Item>\n              <ListGroup.Item>Acc Z<span className=\"float-right\">{setZAcc()}</span></ListGroup.Item>\n              <ListGroup.Item>Acc Interval<span className=\"float-right\">{setAccInt()}</span></ListGroup.Item>\n            </ListGroup>\n          </Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n    \n  );\n}\nexport default OrientationDisplay;","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n/*\nAll from https://sensor-js.xyz/demo.html\n*/\nconst OrientationTest = ({canPlay, handleOrientation}) => {\n  const [availableMessage, setAvailableMessage] = useState(<Alert variant=\"info\">Your device needs to approve access to orientation events for this website. Click the 'Device orientation access' button.</Alert>);\n\n  const handleRequestOrientationButton = () => {\n    if (window.DeviceOrientationEvent) {\n      if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission()\n        .then(response => {\n          if (response === 'granted') {\n            window.addEventListener(\"deviceorientation\", handleOrientation);\n            //Parent component state canPlay should be set to true so can no longer see anything in this component\n          } else {\n            setAvailableMessage(\n            <Alert variant=\"danger\">\n              <p>You need to 'Allow' access to Motion and Orientation for this application to work. You will need to close and re-open the browser to test again.</p>\n            </Alert>);\n          }\n        })\n      } else {\n        setAvailableMessage(\n          <Alert variant=\"warning\">\n            <p>It appears your device has orientation events, please check the following.</p>\n            <ul>\n              <li>The url is using https - orientation requires this;</li>\n              <li>Older iPhones require settings updated. Under Safari in settings is 'Motion and Orientation Access';</li>\n              <li>You may not be able to use the App. Some browsers have this setting even though they are not on a device with an accelerometer;</li>\n            </ul>\n            <p>Testing on all devices and browsers has not been done. Feel free to raise an issue with device and browser</p>\n          </Alert>);\n      }\n    } else {\n      setAvailableMessage(\n        <Alert variant=\"danger\">\n          <p>This device has no orientation event. Try another device.</p>\n        </Alert>);\n    }\n  }\n\n  const playButton = () => {\n    if (canPlay) {\n      //Have display in calling component\n      //return <Button onClick={() => handlePlay()} variant=\"primary\">Start</Button>\n      return \"\"\n    } else {\n      return (<Button onClick={() => handleRequestOrientationButton()} variant=\"dark\">Device orientation access</Button>);\n    }\n  }\n\n  return (\n    <>\n      {playButton()} \n      <br /><br />\n      {!canPlay ? availableMessage : \"\"}\n    </>\n  );\n}\nexport default OrientationTest;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Card from 'react-bootstrap/Card';\nimport OrientationDisplay from '../components/orientation/OrientationDisplay';\nimport OrientationTest from '../components/orientation/OrientationTest';\nimport {isTest} from './utils';\n\nclass Tremor extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      orientationEvent:null,\n      motionEvent:null,\n      canPlay:isTest(),\n      showOrientationDisplayComponent:true,\n    }\n  }\n  \n  componentDidMount(){\n    window.addEventListener(\"deviceorientation\", this.handleOrientation.bind(this));\n    window.addEventListener(\"devicemotion\", this.handleMotion.bind(this));\n  }\n  componentWillUnmount(){\n    window.removeEventListener(\"deviceorientation\", this.handleOrientation.bind(this));\n    window.removeEventListener(\"devicemotion\", this.handleMotion.bind(this));\n  }\n\n  handleOrientation = (event) => {\n    this.setState({\n      orientationEvent:event,\n      canPlay:true,\n    });\n  }\n  \n  handleMotion = (event) => {\n    this.setState({\n      motionEvent:event,\n      canPlay:true,\n    });\n  }\n  \n  mainApp = () => {return (\n    <>\n      What we have here is failure to communicate\n    </>\n  )}\n\n  render(){\n    return (\n      <>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand>Tremor check</Navbar.Brand>\n        </Navbar>\n        <Card>\n          <Card.Body>\n            {this.state.canPlay ? this.mainApp() : \"\"} \n            <p>\n              <br />\n              <OrientationTest canPlay={this.state.canPlay} handleOrientation={this.handleOrientation.bind(this)} />\n              {this.state.showOrientationDisplayComponent && !isTest() ? <OrientationDisplay eventOr={this.state.orientationEvent} eventMo={this.state.motionEvent} />:\"\"} \n            </p>\n          </Card.Body>\n        </Card>\n      </>\n    )\n  }\n}\nexport default Tremor;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Tremor from './components/Tremor';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport './App.css';\n\n/**\n * \n * ==== Rebuilding this app from scratch ====\n * npm install react-bootstrap bootstrap        # Don't forget to add the reference in your index.js\n * npm install react-router-dom\n * The last is so it can go in a sub directory on a server\n */\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename={'/tremor'}>\n        <Container>\n          <Switch>                                          \n            <Route path=\"/\">\n              <Tremor />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}